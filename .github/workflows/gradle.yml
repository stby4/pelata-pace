# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'

    - name: Validate Gradle Wrapper
      uses: gradle/actions/wrapper-validation@v3

    - name: Run checks, unit tests
      run: ./gradlew check

  build:

    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'zulu'

    - name: Validate Gradle Wrapper
      uses: gradle/actions/wrapper-validation@v3

    - name: Build with Gradle
      run: ./gradlew buildFatJar

    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: pelata-jar
        path: build/libs/net.pelata.pace-all.jar
  
  deploy:

    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && false

    steps:
    - uses: actions/checkout@v4

    - name: Download JAR
      uses: actions/download-artifact@v4
      with:
        name: pelata-jar
        path: build/libs
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Build container image
      run: docker build -t ${{ secrets.REGISTRY_NAME }}/pelata:latest .
    
    - name: Log in to CR
      run: doctl registry login --expiry-seconds 1200
    
    - name: Push image to CR
      run: docker push ${{ secrets.REGISTRY_NAME }}/pelata:latest
